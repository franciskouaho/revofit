/**
 * Service de cache local pour les donn√©es de statistiques
 * RevoFit - Cache optimis√© pour les performances statistiques
 */

import AsyncStorage from '@react-native-async-storage/async-storage';

const CACHE_KEYS = {
  USER_STATS: 'user_stats_cache',
  DAILY_ACTIVITY: 'daily_activity_cache',
  WORKOUT_SESSIONS: 'workout_sessions_cache',
  WORKOUT_STATUS: 'workout_status_cache',
  USER_STREAK: 'user_streak_cache',
  WEEKLY_DATA: 'weekly_data_cache',
  MONTHLY_DATA: 'monthly_data_cache',
  PERSONAL_RECORDS: 'personal_records_cache',
  CACHE_TIMESTAMP: 'stats_cache_timestamp',
  CACHE_VERSION: 'stats_cache_version'
} as const;

const CACHE_DURATION = 30 * 60 * 1000; // 30 minutes en millisecondes
const CACHE_VERSION = '1.0.0';

export class StatsCacheService {
  /**
   * Sauvegarde les statistiques utilisateur dans le cache
   */
  static async saveUserStats(stats: any): Promise<void> {
    try {
      const cacheData = {
        data: stats,
        timestamp: Date.now(),
        version: CACHE_VERSION
      };
      
      await AsyncStorage.setItem(CACHE_KEYS.USER_STATS, JSON.stringify(cacheData));
      console.log('‚úÖ Statistiques utilisateur mises en cache');
    } catch (error) {
      console.error('‚ùå Erreur lors de la sauvegarde des statistiques utilisateur:', error);
    }
  }

  /**
   * R√©cup√®re les statistiques utilisateur depuis le cache
   */
  static async getCachedUserStats(): Promise<any | null> {
    try {
      const cachedData = await AsyncStorage.getItem(CACHE_KEYS.USER_STATS);
      if (!cachedData) return null;

      const data = JSON.parse(cachedData);
      
      // V√©rifier la version et l'√¢ge du cache
      if (data.version !== CACHE_VERSION || Date.now() - data.timestamp > CACHE_DURATION) {
        await this.clearUserStatsCache();
        return null;
      }

      console.log('üì± Statistiques utilisateur r√©cup√©r√©es du cache');
      return data.data;
    } catch (error) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration des statistiques utilisateur:', error);
      return null;
    }
  }

  /**
   * Sauvegarde l'activit√© quotidienne dans le cache
   */
  static async saveDailyActivity(activity: any[], date: string): Promise<void> {
    try {
      const cacheData = {
        data: activity,
        date,
        timestamp: Date.now(),
        version: CACHE_VERSION
      };
      
      await AsyncStorage.setItem(`${CACHE_KEYS.DAILY_ACTIVITY}_${date}`, JSON.stringify(cacheData));
      console.log('‚úÖ Activit√© quotidienne mise en cache pour', date);
    } catch (error) {
      console.error('‚ùå Erreur lors de la sauvegarde de l\'activit√© quotidienne:', error);
    }
  }

  /**
   * R√©cup√®re l'activit√© quotidienne depuis le cache
   */
  static async getCachedDailyActivity(date: string): Promise<any[] | null> {
    try {
      const cachedData = await AsyncStorage.getItem(`${CACHE_KEYS.DAILY_ACTIVITY}_${date}`);
      if (!cachedData) return null;

      const data = JSON.parse(cachedData);
      
      // V√©rifier la version et l'√¢ge du cache
      if (data.version !== CACHE_VERSION || Date.now() - data.timestamp > CACHE_DURATION) {
        await this.clearDailyActivityCache(date);
        return null;
      }

      console.log('üì± Activit√© quotidienne r√©cup√©r√©e du cache pour', date);
      return data.data;
    } catch (error) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration de l\'activit√© quotidienne:', error);
      return null;
    }
  }

  /**
   * Sauvegarde les sessions d'entra√Ænement dans le cache
   */
  static async saveWorkoutSessions(sessions: any[]): Promise<void> {
    try {
      const cacheData = {
        data: sessions,
        timestamp: Date.now(),
        version: CACHE_VERSION
      };
      
      await AsyncStorage.setItem(CACHE_KEYS.WORKOUT_SESSIONS, JSON.stringify(cacheData));
      console.log('‚úÖ Sessions d\'entra√Ænement mises en cache:', sessions.length);
    } catch (error) {
      console.error('‚ùå Erreur lors de la sauvegarde des sessions d\'entra√Ænement:', error);
    }
  }

  /**
   * R√©cup√®re les sessions d'entra√Ænement depuis le cache
   */
  static async getCachedWorkoutSessions(): Promise<any[] | null> {
    try {
      const cachedData = await AsyncStorage.getItem(CACHE_KEYS.WORKOUT_SESSIONS);
      if (!cachedData) return null;

      const data = JSON.parse(cachedData);
      
      // V√©rifier la version et l'√¢ge du cache
      if (data.version !== CACHE_VERSION || Date.now() - data.timestamp > CACHE_DURATION) {
        await this.clearWorkoutSessionsCache();
        return null;
      }

      console.log('üì± Sessions d\'entra√Ænement r√©cup√©r√©es du cache:', data.data.length);
      return data.data;
    } catch (error) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration des sessions d\'entra√Ænement:', error);
      return null;
    }
  }

  /**
   * Sauvegarde le statut d'entra√Ænement dans le cache
   */
  static async saveWorkoutStatus(status: any): Promise<void> {
    try {
      const cacheData = {
        data: status,
        timestamp: Date.now(),
        version: CACHE_VERSION
      };
      
      await AsyncStorage.setItem(CACHE_KEYS.WORKOUT_STATUS, JSON.stringify(cacheData));
      console.log('‚úÖ Statut d\'entra√Ænement mis en cache');
    } catch (error) {
      console.error('‚ùå Erreur lors de la sauvegarde du statut d\'entra√Ænement:', error);
    }
  }

  /**
   * R√©cup√®re le statut d'entra√Ænement depuis le cache
   */
  static async getCachedWorkoutStatus(): Promise<any | null> {
    try {
      const cachedData = await AsyncStorage.getItem(CACHE_KEYS.WORKOUT_STATUS);
      if (!cachedData) return null;

      const data = JSON.parse(cachedData);
      
      // V√©rifier la version et l'√¢ge du cache
      if (data.version !== CACHE_VERSION || Date.now() - data.timestamp > CACHE_DURATION) {
        await this.clearWorkoutStatusCache();
        return null;
      }

      console.log('üì± Statut d\'entra√Ænement r√©cup√©r√© du cache');
      return data.data;
    } catch (error) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration du statut d\'entra√Ænement:', error);
      return null;
    }
  }

  /**
   * Sauvegarde la s√©rie de l'utilisateur dans le cache
   */
  static async saveUserStreak(streak: any): Promise<void> {
    try {
      const cacheData = {
        data: streak,
        timestamp: Date.now(),
        version: CACHE_VERSION
      };
      
      await AsyncStorage.setItem(CACHE_KEYS.USER_STREAK, JSON.stringify(cacheData));
      console.log('‚úÖ S√©rie utilisateur mise en cache');
    } catch (error) {
      console.error('‚ùå Erreur lors de la sauvegarde de la s√©rie utilisateur:', error);
    }
  }

  /**
   * R√©cup√®re la s√©rie de l'utilisateur depuis le cache
   */
  static async getCachedUserStreak(): Promise<any | null> {
    try {
      const cachedData = await AsyncStorage.getItem(CACHE_KEYS.USER_STREAK);
      if (!cachedData) return null;

      const data = JSON.parse(cachedData);
      
      // V√©rifier la version et l'√¢ge du cache
      if (data.version !== CACHE_VERSION || Date.now() - data.timestamp > CACHE_DURATION) {
        await this.clearUserStreakCache();
        return null;
      }

      console.log('üì± S√©rie utilisateur r√©cup√©r√©e du cache');
      return data.data;
    } catch (error) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration de la s√©rie utilisateur:', error);
      return null;
    }
  }

  /**
   * Sauvegarde toutes les donn√©es de statistiques dans le cache
   */
  static async saveAllStatsData(statsData: any): Promise<void> {
    try {
      const cacheData = {
        data: statsData,
        timestamp: Date.now(),
        version: CACHE_VERSION
      };
      
      await AsyncStorage.setItem('all_stats_data', JSON.stringify(cacheData));
      console.log('‚úÖ Toutes les donn√©es de statistiques mises en cache');
    } catch (error) {
      console.error('‚ùå Erreur lors de la sauvegarde de toutes les donn√©es de statistiques:', error);
    }
  }

  /**
   * R√©cup√®re toutes les donn√©es de statistiques depuis le cache
   */
  static async getAllCachedStatsData(): Promise<any | null> {
    try {
      const cachedData = await AsyncStorage.getItem('all_stats_data');
      if (!cachedData) return null;

      const data = JSON.parse(cachedData);
      
      // V√©rifier la version et l'√¢ge du cache
      if (data.version !== CACHE_VERSION || Date.now() - data.timestamp > CACHE_DURATION) {
        await this.clearAllStatsCache();
        return null;
      }

      console.log('üì± Toutes les donn√©es de statistiques r√©cup√©r√©es du cache');
      return data.data;
    } catch (error) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration de toutes les donn√©es de statistiques:', error);
      return null;
    }
  }

  /**
   * Vide le cache des statistiques utilisateur
   */
  static async clearUserStatsCache(): Promise<void> {
    try {
      await AsyncStorage.removeItem(CACHE_KEYS.USER_STATS);
    } catch (error) {
      console.error('‚ùå Erreur lors du vidage du cache statistiques utilisateur:', error);
    }
  }

  /**
   * Vide le cache de l'activit√© quotidienne
   */
  static async clearDailyActivityCache(date?: string): Promise<void> {
    try {
      if (date) {
        await AsyncStorage.removeItem(`${CACHE_KEYS.DAILY_ACTIVITY}_${date}`);
      } else {
        // Vider tous les caches d'activit√© quotidienne
        const keys = await AsyncStorage.getAllKeys();
        const dailyKeys = keys.filter(key => key.startsWith(CACHE_KEYS.DAILY_ACTIVITY));
        await AsyncStorage.multiRemove(dailyKeys);
      }
    } catch (error) {
      console.error('‚ùå Erreur lors du vidage du cache activit√© quotidienne:', error);
    }
  }

  /**
   * Vide le cache des sessions d'entra√Ænement
   */
  static async clearWorkoutSessionsCache(): Promise<void> {
    try {
      await AsyncStorage.removeItem(CACHE_KEYS.WORKOUT_SESSIONS);
    } catch (error) {
      console.error('‚ùå Erreur lors du vidage du cache sessions d\'entra√Ænement:', error);
    }
  }

  /**
   * Vide le cache du statut d'entra√Ænement
   */
  static async clearWorkoutStatusCache(): Promise<void> {
    try {
      await AsyncStorage.removeItem(CACHE_KEYS.WORKOUT_STATUS);
    } catch (error) {
      console.error('‚ùå Erreur lors du vidage du cache statut d\'entra√Ænement:', error);
    }
  }

  /**
   * Vide le cache de la s√©rie utilisateur
   */
  static async clearUserStreakCache(): Promise<void> {
    try {
      await AsyncStorage.removeItem(CACHE_KEYS.USER_STREAK);
    } catch (error) {
      console.error('‚ùå Erreur lors du vidage du cache s√©rie utilisateur:', error);
    }
  }

  /**
   * Vide tout le cache des statistiques
   */
  static async clearAllStatsCache(): Promise<void> {
    try {
      await AsyncStorage.multiRemove([
        CACHE_KEYS.USER_STATS,
        CACHE_KEYS.WORKOUT_SESSIONS,
        CACHE_KEYS.WORKOUT_STATUS,
        CACHE_KEYS.USER_STREAK,
        CACHE_KEYS.WEEKLY_DATA,
        CACHE_KEYS.MONTHLY_DATA,
        CACHE_KEYS.PERSONAL_RECORDS,
        CACHE_KEYS.CACHE_TIMESTAMP,
        CACHE_KEYS.CACHE_VERSION,
        'all_stats_data'
      ]);
      
      // Vider aussi tous les caches d'activit√© quotidienne
      await this.clearDailyActivityCache();
      
      console.log('üóëÔ∏è Cache statistiques vid√©');
    } catch (error) {
      console.error('‚ùå Erreur lors du vidage du cache statistiques:', error);
    }
  }
}

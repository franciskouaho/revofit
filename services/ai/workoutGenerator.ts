/**
 * Service IA pour la g√©n√©ration de plans d'entra√Ænement
 * RevoFit - G√©n√©ration intelligente de workouts
 */

import { Exercise, ExerciseTemplate } from '../../types/exercise';
import { ExerciseService } from '../firebase/exercises';
import { AIChatService } from './chatService';

// Types pour la g√©n√©ration de workout
export interface WorkoutGenerationParams {
  equipment: string;
  duration: string;
  intensity: string;
  muscleGroups: string[];
  additionalInfo?: string;
}

export interface GeneratedExercise {
  name: string;
  nameEn: string;
  muscleGroups: string[];
  equipment: string[];
  difficulty: 'beginner' | 'intermediate' | 'advanced';
  instructions: string[];
  tips: string[];
  sets: number;
  reps: number;
  rest: number; // en secondes
  order: number;
}

export interface GeneratedWorkout {
  title: string;
  description: string;
  exercises: GeneratedExercise[];
  totalDuration: number; // en minutes
  difficulty: 'beginner' | 'intermediate' | 'advanced';
  equipment: string[];
  muscleGroups: string[];
  estimatedCalories: number;
  instructions: string[];
  tips: string[];
}

/**
 * Service de g√©n√©ration de workouts avec IA
 */
export class AIWorkoutGenerator {
  /**
   * G√©n√®re un plan d'entra√Ænement personnalis√© avec l'IA
   */
  static async generateWorkout(params: WorkoutGenerationParams): Promise<GeneratedWorkout> {
    try {
      const prompt = this.buildWorkoutPrompt(params);
      
      const response = await AIChatService.sendMessageToAI(prompt, {
        userStats: {
          equipment: params.equipment,
          duration: params.duration,
          intensity: params.intensity,
          muscleGroups: params.muscleGroups
        }
      });

      return this.parseWorkoutResponse(response.message, params);
    } catch (error) {
      console.error('Erreur lors de la g√©n√©ration du workout:', error);
      throw new Error('Impossible de g√©n√©rer le plan d\'entra√Ænement. Veuillez r√©essayer.');
    }
  }

  /**
   * Construit le prompt pour la g√©n√©ration de workout
   */
  private static buildWorkoutPrompt(params: WorkoutGenerationParams): string {
    const durationMinutes = this.parseDuration(params.duration);
    
    return `Tu es un expert en fitness et musculation. G√©n√®re un plan d'entra√Ænement complet et structur√©.

PARAM√àTRES:
- √âquipement disponible: ${params.equipment}
- Dur√©e: ${params.duration} (${durationMinutes} minutes)
- Intensit√©: ${params.intensity}
- Groupes musculaires cibl√©s: ${params.muscleGroups.join(', ')}
- Informations suppl√©mentaires: ${params.additionalInfo || 'Aucune'}

IMPORTANT: R√©ponds UNIQUEMENT avec un JSON valide, sans texte avant ou apr√®s.

FORMAT DE R√âPONSE OBLIGATOIRE (JSON valide):
{
  "title": "Titre du workout",
  "description": "Description d√©taill√©e du workout",
  "exercises": [
    {
      "name": "Nom de l'exercice en fran√ßais",
      "nameEn": "Nom de l'exercice en anglais",
      "muscleGroups": ["groupe1", "groupe2"],
      "equipment": ["√©quipement1", "√©quipement2"],
      "difficulty": "beginner|intermediate|advanced",
      "instructions": ["instruction1", "instruction2"],
      "tips": ["conseil1", "conseil2"],
      "sets": 3,
      "reps": 12,
      "rest": 60,
      "order": 1
    }
  ],
  "totalDuration": ${durationMinutes},
  "difficulty": "beginner|intermediate|advanced",
  "equipment": ["${params.equipment}"],
  "muscleGroups": ${JSON.stringify(params.muscleGroups)},
  "estimatedCalories": 300,
  "instructions": ["instruction g√©n√©rale 1", "instruction g√©n√©rale 2"],
  "tips": ["conseil g√©n√©ral 1", "conseil g√©n√©ral 2"]
}

R√àGLES IMPORTANTES:
1. Adapte le nombre d'exercices √† la dur√©e (environ 1 exercice par 5-7 minutes)
2. Respecte l'√©quipement disponible
3. Cible les groupes musculaires demand√©s
4. Adapte l'intensit√© (reps, sets, poids) selon le niveau
5. Inclus un √©chauffement et une r√©cup√©ration
6. Varie les exercices pour √©viter la monotonie
7. Assure-toi que le JSON est valide et complet
8. Utilise des noms d'exercices r√©alistes et reconnus
9. Inclus des instructions claires et des conseils pratiques
10. Calcule une estimation r√©aliste des calories br√ªl√©es

G√©n√®re un workout motivant et efficace !`;
  }


  /**
   * Parse la dur√©e en minutes
   */
  private static parseDuration(duration: string): number {
    const match = duration.match(/(\d+)h?\s*(\d+)?m?/);
    if (match) {
      const hours = parseInt(match[1]) || 0;
      const minutes = parseInt(match[2]) || 0;
      return hours * 60 + minutes;
    }
    return 60; // Par d√©faut 1h
  }

  /**
   * Parse la r√©ponse de l'IA pour extraire le workout
   */
  private static parseWorkoutResponse(response: string, params: WorkoutGenerationParams): GeneratedWorkout {
    try {
      console.log('üîç R√©ponse IA brute:', response);
      
      // V√©rifier si c'est un message d'erreur
      if (response.includes('D√©sol√©, je rencontre un probl√®me technique') || 
          response.includes('probl√®me technique') ||
          response.includes('Erreur')) {
        console.log('‚ö†Ô∏è Message d\'erreur d√©tect√©, utilisation du fallback');
        return this.generateFallbackWorkout(params);
      }
      
      // Nettoyer la r√©ponse et essayer plusieurs m√©thodes d'extraction JSON
      let workoutData;
      
      // M√©thode 1: Chercher un JSON complet entre accolades
      const jsonMatch = response.match(/\{[\s\S]*\}/);
      if (jsonMatch) {
        try {
          workoutData = JSON.parse(jsonMatch[0]);
          console.log('‚úÖ JSON extrait avec regex:', workoutData);
        } catch {
          console.log('‚ùå √âchec parsing regex, essai m√©thode 2');
        }
      }
      
      // M√©thode 2: Chercher un JSON entre ```json et ```
      if (!workoutData) {
        const codeBlockMatch = response.match(/```json\s*(\{[\s\S]*?\})\s*```/);
        if (codeBlockMatch) {
          try {
            workoutData = JSON.parse(codeBlockMatch[1]);
            console.log('‚úÖ JSON extrait du code block:', workoutData);
          } catch {
            console.log('‚ùå √âchec parsing code block, essai m√©thode 3');
          }
        }
      }
      
      // M√©thode 3: Essayer de parser directement la r√©ponse
      if (!workoutData) {
        try {
          workoutData = JSON.parse(response);
          console.log('‚úÖ JSON pars√© directement:', workoutData);
        } catch {
          console.log('‚ùå √âchec parsing direct, essai m√©thode 4');
        }
      }
      
      // M√©thode 4: Chercher un JSON valide en testant diff√©rentes parties
      if (!workoutData) {
        const lines = response.split('\n');
        for (let i = 0; i < lines.length; i++) {
          for (let j = i + 1; j < lines.length; j++) {
            const testJson = lines.slice(i, j).join('\n');
            try {
              const parsed = JSON.parse(testJson);
              if (parsed && typeof parsed === 'object' && parsed.exercises) {
                workoutData = parsed;
                console.log('‚úÖ JSON trouv√© dans les lignes:', workoutData);
                break;
              }
            } catch {
              // Continuer √† chercher
            }
          }
          if (workoutData) break;
        }
      }
      
      if (!workoutData) {
        console.error('‚ùå Impossible d\'extraire un JSON valide de la r√©ponse:', response);
        console.log('üîÑ G√©n√©ration d\'un workout de fallback...');
        
        // G√©n√©rer un workout de fallback avec des exercices de base
        workoutData = this.generateFallbackWorkout(params);
      }
      
      // Validation des donn√©es requises
      if (!workoutData.title || !workoutData.exercises || !Array.isArray(workoutData.exercises)) {
        throw new Error('Donn√©es de workout incompl√®tes');
      }

      // Validation et nettoyage des exercices
      const exercises: GeneratedExercise[] = workoutData.exercises.map((ex: any, index: number) => ({
        name: ex.name || `Exercice ${index + 1}`,
        nameEn: ex.nameEn || ex.name || `Exercise ${index + 1}`,
        muscleGroups: Array.isArray(ex.muscleGroups) ? ex.muscleGroups : [],
        equipment: Array.isArray(ex.equipment) ? ex.equipment : [params.equipment],
        difficulty: ['beginner', 'intermediate', 'advanced'].includes(ex.difficulty) 
          ? ex.difficulty 
          : this.mapIntensityToDifficulty(params.intensity),
        instructions: Array.isArray(ex.instructions) ? ex.instructions : [],
        tips: Array.isArray(ex.tips) ? ex.tips : [],
        sets: typeof ex.sets === 'number' ? ex.sets : this.getDefaultSets(params.intensity),
        reps: typeof ex.reps === 'number' ? ex.reps : this.getDefaultReps(params.intensity),
        rest: typeof ex.rest === 'number' ? ex.rest : 60,
        order: typeof ex.order === 'number' ? ex.order : index + 1
      }));

      return {
        title: workoutData.title || `Workout ${params.muscleGroups.join(', ')}`,
        description: workoutData.description || `Entra√Ænement ciblant ${params.muscleGroups.join(', ')} avec ${params.equipment}`,
        exercises,
        totalDuration: workoutData.totalDuration || this.parseDuration(params.duration),
        difficulty: workoutData.difficulty || this.mapIntensityToDifficulty(params.intensity),
        equipment: workoutData.equipment || [params.equipment],
        muscleGroups: workoutData.muscleGroups || params.muscleGroups,
        estimatedCalories: workoutData.estimatedCalories || this.estimateCalories(params.intensity, this.parseDuration(params.duration)),
        instructions: Array.isArray(workoutData.instructions) ? workoutData.instructions : [],
        tips: Array.isArray(workoutData.tips) ? workoutData.tips : []
      };
    } catch (error) {
      console.error('Erreur lors du parsing de la r√©ponse IA:', error);
      // Fallback: g√©n√©rer un workout basique
      return this.generateFallbackWorkout(params);
    }
  }

  /**
   * G√©n√®re un workout de fallback en cas d'erreur
   */
  private static generateFallbackWorkout(params: WorkoutGenerationParams): GeneratedWorkout {
    const duration = this.parseDuration(params.duration);
    const exerciseCount = Math.max(3, Math.floor(duration / 8));
    
    const exercises: GeneratedExercise[] = [];
    
    // Exercices de base selon l'√©quipement
    const baseExercises = this.getBaseExercises(params.equipment, params.muscleGroups);
    
    for (let i = 0; i < Math.min(exerciseCount, baseExercises.length); i++) {
      const baseEx = baseExercises[i];
      exercises.push({
        name: baseEx.name || `Exercice ${i + 1}`,
        nameEn: baseEx.nameEn || baseEx.name || `Exercise ${i + 1}`,
        muscleGroups: baseEx.muscleGroups || [],
        equipment: baseEx.equipment || [params.equipment],
        difficulty: baseEx.difficulty || this.mapIntensityToDifficulty(params.intensity),
        instructions: baseEx.instructions || [],
        tips: baseEx.tips || [],
        sets: this.getDefaultSets(params.intensity),
        reps: this.getDefaultReps(params.intensity),
        rest: 60,
        order: i + 1
      });
    }

    return {
      title: `Workout ${params.muscleGroups.join(', ')}`,
      description: `Entra√Ænement ciblant ${params.muscleGroups.join(', ')} avec ${params.equipment}`,
      exercises,
      totalDuration: duration,
      difficulty: this.mapIntensityToDifficulty(params.intensity),
      equipment: [params.equipment],
      muscleGroups: params.muscleGroups,
      estimatedCalories: this.estimateCalories(params.intensity, duration),
      instructions: [
        '√âchauffez-vous 5-10 minutes avant de commencer',
        'Respectez les temps de repos entre les s√©ries',
        'Hydratez-vous r√©guli√®rement',
        '√âcoutez votre corps et ajustez l\'intensit√© si n√©cessaire'
      ],
      tips: [
        'Maintenez une forme correcte plut√¥t que de soulever lourd',
        'Respirez correctement pendant les exercices',
        'Progressez graduellement dans l\'intensit√©'
      ]
    };
  }

  /**
   * Retourne des exercices de base selon l'√©quipement
   */
  private static getBaseExercises(equipment: string, muscleGroups: string[]): Partial<GeneratedExercise>[] {
    const exercises: Partial<GeneratedExercise>[] = [];

    if (equipment === 'No Equipment') {
      exercises.push(
        { name: 'Pompes', nameEn: 'Push-ups', muscleGroups: ['Chest', 'Triceps'], equipment: ['aucun'] },
        { name: 'Squats', nameEn: 'Squats', muscleGroups: ['Quads', 'Glutes'], equipment: ['aucun'] },
        { name: 'Planche', nameEn: 'Plank', muscleGroups: ['Core'], equipment: ['aucun'] },
        { name: 'Fentes', nameEn: 'Lunges', muscleGroups: ['Quads', 'Glutes'], equipment: ['aucun'] },
        { name: 'Burpees', nameEn: 'Burpees', muscleGroups: ['Quads', 'Chest', 'Core'], equipment: ['aucun'] }
      );
    } else if (equipment === 'Home Gym (DB/KB)') {
      exercises.push(
        { name: 'D√©velopp√© couch√© halt√®res', nameEn: 'Dumbbell Bench Press', muscleGroups: ['Chest', 'Triceps'], equipment: ['halt√®res'] },
        { name: 'Squats avec halt√®res', nameEn: 'Dumbbell Squats', muscleGroups: ['Quads', 'Glutes'], equipment: ['halt√®res'] },
        { name: 'Rowing halt√®re', nameEn: 'Dumbbell Row', muscleGroups: ['Back', 'Biceps'], equipment: ['halt√®res'] },
        { name: 'D√©velopp√© militaire', nameEn: 'Overhead Press', muscleGroups: ['Shoulders', 'Triceps'], equipment: ['halt√®res'] }
      );
    } else {
      exercises.push(
        { name: 'D√©velopp√© couch√©', nameEn: 'Bench Press', muscleGroups: ['Chest', 'Triceps'], equipment: ['barbell'] },
        { name: 'Squats', nameEn: 'Squats', muscleGroups: ['Quads', 'Glutes'], equipment: ['barbell'] },
        { name: 'Rowing barre', nameEn: 'Barbell Row', muscleGroups: ['Back', 'Biceps'], equipment: ['barbell'] },
        { name: 'Soulev√© de terre', nameEn: 'Deadlift', muscleGroups: ['Back', 'Hamstrings', 'Glutes'], equipment: ['barbell'] }
      );
    }

    return exercises.slice(0, 5);
  }

  /**
   * Mappe l'intensit√© vers la difficult√©
   */
  private static mapIntensityToDifficulty(intensity: string): 'beginner' | 'intermediate' | 'advanced' {
    switch (intensity.toLowerCase()) {
      case 'low': return 'beginner';
      case 'medium': return 'intermediate';
      case 'high': return 'advanced';
      default: return 'intermediate';
    }
  }

  /**
   * Retourne le nombre de s√©ries par d√©faut selon l'intensit√©
   */
  private static getDefaultSets(intensity: string): number {
    switch (intensity.toLowerCase()) {
      case 'low': return 3;
      case 'medium': return 4;
      case 'high': return 5;
      default: return 4;
    }
  }

  /**
   * Retourne le nombre de reps par d√©faut selon l'intensit√©
   */
  private static getDefaultReps(intensity: string): number {
    switch (intensity.toLowerCase()) {
      case 'low': return 12;
      case 'medium': return 10;
      case 'high': return 8;
      default: return 10;
    }
  }

  /**
   * Estime les calories br√ªl√©es
   */
  private static estimateCalories(intensity: string, duration: number): number {
    const baseCalories = duration * 5; // 5 cal/min de base
    const multiplier = intensity.toLowerCase() === 'high' ? 1.5 : intensity.toLowerCase() === 'medium' ? 1.2 : 1.0;
    return Math.round(baseCalories * multiplier);
  }

  /**
   * Convertit un workout g√©n√©r√© en template Firebase
   */
  static convertToExerciseTemplate(workout: GeneratedWorkout, userId: string): Omit<ExerciseTemplate, 'id' | 'createdAt' | 'updatedAt'> {
    return {
      name: workout.title,
      description: workout.description,
      muscleGroups: workout.muscleGroups,
      exercises: workout.exercises.map(ex => ({
        id: ex.nameEn.toLowerCase().replace(/\s+/g, '-'),
        name: ex.name,
        nameEn: ex.nameEn,
        muscleGroups: ex.muscleGroups,
        equipment: ex.equipment,
        difficulty: ex.difficulty,
        instructions: ex.instructions,
        tips: ex.tips,
        imageUrl: `https://images.unsplash.com/photo-1571019613454-1cb2f99b2d8b?w=400&q=80&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D`,
        createdAt: new Date(),
        updatedAt: new Date()
      })),
      duration: workout.totalDuration,
      difficulty: workout.difficulty,
      equipment: workout.equipment,
      imageUrl: `https://images.unsplash.com/photo-1571019613454-1cb2f99b2d8b?w=400&q=80&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D`,
      isPublic: false,
      createdBy: userId
    };
  }

  /**
   * Sauvegarde les exercices g√©n√©r√©s par l'IA dans la base de donn√©es
   */
  static async saveGeneratedExercises(workout: GeneratedWorkout): Promise<Exercise[]> {
    const savedExercises: Exercise[] = [];
    
    for (const generatedEx of workout.exercises) {
      try {
        // Convertir l'exercice g√©n√©r√© en format Exercise
        const exerciseData: Omit<Exercise, 'id' | 'createdAt' | 'updatedAt'> = {
          name: generatedEx.name,
          nameEn: generatedEx.nameEn,
          muscleGroups: generatedEx.muscleGroups,
          equipment: generatedEx.equipment,
          difficulty: generatedEx.difficulty,
          instructions: generatedEx.instructions,
          tips: generatedEx.tips,
          imageUrl: '' // L'IA ne g√©n√®re pas d'images
        };

        // Sauvegarder dans Firebase
        const response = await ExerciseService.createExercise(exerciseData);
        
        if (response.success && response.data) {
          // response.data peut √™tre Exercise ou Exercise[], on s'assure que c'est un Exercise
          const exercise = Array.isArray(response.data) ? response.data[0] : response.data;
          if (exercise) {
            savedExercises.push(exercise);
          }
        } else {
          console.warn('Erreur lors de la sauvegarde de l\'exercice:', generatedEx.name);
        }
      } catch (error) {
        console.error('Erreur lors de la sauvegarde de l\'exercice:', generatedEx.name, error);
      }
    }
    
    return savedExercises;
  }
}

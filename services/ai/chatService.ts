/**
 * Service de chat IA avec OpenAI API
 * RevoFit - Service pour l'intelligence artificielle et le coaching
 */

import { ChatMessage } from '../firebase/notifications';

// Configuration OpenAI - S√âCURIS√âE
const OPENAI_API_KEY = process.env.EXPO_PUBLIC_OPENAI_API_KEY || '';
const OPENAI_API_URL = 'https://api.openai.com/v1/chat/completions';

// V√©rification de s√©curit√©
if (!OPENAI_API_KEY && __DEV__) {
  console.warn('‚ö†Ô∏è Cl√© API OpenAI non configur√©e. Ajoutez EXPO_PUBLIC_OPENAI_API_KEY dans votre fichier .env');
}

// Types pour l'IA
export interface AIChatMessage {
  role: 'system' | 'user' | 'assistant';
  content: string;
}

export interface AIChatResponse {
  message: string;
  suggestions?: string[];
  workoutRecommendations?: {
    exercise: string;
    sets: number;
    reps: number;
    rest: number;
  }[];
  nutritionAdvice?: {
    food: string;
    quantity: string;
    timing: string;
  }[];
}

export interface CoachProfile {
  id: string;
  name: string;
  specialty: string;
  experience: number;
  rating: number;
  avatar: string;
  isOnline: boolean;
  lastActive: Date;
}

/**
 * Service de chat IA
 */
export class AIChatService {
  /**
   * Envoie un message √† l'IA et r√©cup√®re la r√©ponse
   */
  static async sendMessageToAI(
    message: string,
    context?: {
      userStats?: any;
      recentWorkouts?: any[];
      goals?: any;
    }
  ): Promise<AIChatResponse> {
    try {
      if (!OPENAI_API_KEY) {
        console.error('‚ùå Cl√© API OpenAI non configur√©e');
        throw new Error('Cl√© API OpenAI non configur√©e');
      }

      console.log('üîë Cl√© API OpenAI trouv√©e, envoi de la requ√™te...');

      const systemPrompt = this.buildSystemPrompt(context);
      const messages: AIChatMessage[] = [
        { role: 'system', content: systemPrompt },
        { role: 'user', content: message }
      ];

      // Cr√©er un AbortController pour g√©rer le timeout
      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), 30000); // 30 secondes

      const response = await fetch(OPENAI_API_URL, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${OPENAI_API_KEY}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          model: 'gpt-3.5-turbo',
          messages,
          max_tokens: 2000, // Augment√© pour les workouts
          temperature: 0.7,
        }),
        signal: controller.signal
      });

      // Nettoyer le timeout
      clearTimeout(timeoutId);

      if (!response.ok) {
        throw new Error(`Erreur API OpenAI: ${response.status}`);
      }

      const data = await response.json();
      const aiMessage = data.choices[0].message.content;

      return this.parseAIResponse(aiMessage);
    } catch (error) {
      console.error('Erreur lors de l\'envoi du message √† l\'IA:', error);
      
      // Gestion sp√©cifique des erreurs
      if (error instanceof Error) {
        if (error.name === 'AbortError') {
          return {
            message: 'La requ√™te a pris trop de temps. Veuillez r√©essayer.',
            suggestions: ['R√©essayer', 'V√©rifier votre connexion']
          };
        }
        
        if (error.message.includes('API OpenAI')) {
          return {
            message: 'Erreur de connexion avec l\'IA. V√©rifiez votre connexion internet.',
            suggestions: ['R√©essayer', 'V√©rifier la connexion']
          };
        }
      }
      
      return {
        message: 'D√©sol√©, je rencontre un probl√®me technique. Veuillez r√©essayer plus tard.',
        suggestions: ['R√©essayer', 'Contacter le support']
      };
    }
  }

  /**
   * Construit le prompt syst√®me pour l'IA
   */
  private static buildSystemPrompt(context?: any): string {
    let prompt = `Tu es un coach fitness IA sp√©cialis√© dans l'entra√Ænement et la nutrition. 
Tu es expert en musculation, cardio, HIIT, yoga et nutrition sportive.
Tu dois √™tre motivant, professionnel et donner des conseils pratiques et s√ªrs.

R√®gles importantes:
- Toujours recommander de consulter un professionnel de sant√© avant de commencer un nouveau programme
- Adapter tes conseils au niveau de l'utilisateur
- √ätre positif et motivant
- Donner des conseils pratiques et r√©alisables
- Inclure des suggestions d'exercices sp√©cifiques quand appropri√©

Format de r√©ponse:
- R√©ponds de mani√®re conversationnelle et amicale
- Inclus des suggestions d'actions concr√®tes
- Propose des exercices avec sets/reps/rest quand pertinent
- Donne des conseils nutritionnels basiques quand appropri√©`;

    if (context?.userStats) {
      prompt += `\n\nInformations sur l'utilisateur:
- Calories br√ªl√©es: ${context.userStats.calories}
- Entra√Ænements compl√©t√©s: ${context.userStats.workouts?.completed || 0}
- Streak actuel: ${context.userStats.streak || 0} jours`;
    }

    if (context?.goals) {
      prompt += `\n\nObjectifs de l'utilisateur: ${JSON.stringify(context.goals)}`;
    }

    return prompt;
  }

  /**
   * Parse la r√©ponse de l'IA pour extraire les suggestions et recommandations
   */
  private static parseAIResponse(message: string): AIChatResponse {
    // Extraire les suggestions (mots-cl√©s simples)
    const suggestions = this.extractSuggestions(message);

    // Extraire les recommandations d'exercices
    const workoutRecommendations = this.extractWorkoutRecommendations(message);

    // Extraire les conseils nutritionnels
    const nutritionAdvice = this.extractNutritionAdvice(message);

    return {
      message,
      suggestions,
      workoutRecommendations,
      nutritionAdvice
    };
  }

  /**
   * Extrait les suggestions de la r√©ponse
   */
  private static extractSuggestions(message: string): string[] {
    const suggestions: string[] = [];

    // Suggestions communes bas√©es sur le contenu
    if (message.toLowerCase().includes('exercice') || message.toLowerCase().includes('entra√Ænement')) {
      suggestions.push('Voir les exercices', 'Programmer un entra√Ænement');
    }

    if (message.toLowerCase().includes('nutrition') || message.toLowerCase().includes('alimentation')) {
      suggestions.push('Voir la nutrition', 'Planifier les repas');
    }

    if (message.toLowerCase().includes('objectif') || message.toLowerCase().includes('progression')) {
      suggestions.push('Voir les statistiques', 'D√©finir un objectif');
    }

    if (message.toLowerCase().includes('motivation') || message.toLowerCase().includes('conseil')) {
      suggestions.push('Voir les conseils', 'Parler √† un coach');
    }

    return suggestions.length > 0 ? suggestions : ['Poser une question', 'Voir les exercices'];
  }

  /**
   * Extrait les recommandations d'exercices
   */
  private static extractWorkoutRecommendations(message: string): any[] {
    const recommendations: any[] = [];

    // Recherche de patterns d'exercices dans le message
    const exercisePatterns = [
      { pattern: /(\d+)\s*(?:s√©ries?|sets?)\s*de\s*(\d+)\s*(?:reps?|r√©p√©titions?)/gi, sets: 1, reps: 2 },
      { pattern: /(\d+)\s*(?:reps?|r√©p√©titions?)\s*par\s*(\d+)\s*(?:s√©ries?|sets?)/gi, sets: 2, reps: 1 }
    ];

    exercisePatterns.forEach(({ pattern, sets, reps }) => {
      const matches = [...message.matchAll(pattern)];
      matches.forEach(match => {
        recommendations.push({
          exercise: 'Exercice recommand√©',
          sets: parseInt(match[sets]),
          reps: parseInt(match[reps]),
          rest: 60
        });
      });
    });

    return recommendations;
  }

  /**
   * Extrait les conseils nutritionnels
   */
  private static extractNutritionAdvice(message: string): any[] {
    const advice: any[] = [];

    // Recherche de patterns nutritionnels
    const nutritionPatterns = [
      { pattern: /(\d+)\s*(?:g|grammes?)\s*de\s*(\w+)/gi, quantity: 1, food: 2 },
      { pattern: /(\d+)\s*(?:ml|litres?)\s*de\s*(\w+)/gi, quantity: 1, food: 2 }
    ];

    nutritionPatterns.forEach(({ pattern, quantity, food }) => {
      const matches = [...message.matchAll(pattern)];
      matches.forEach(match => {
        advice.push({
          food: match[food],
          quantity: match[quantity],
          timing: 'Selon les besoins'
        });
      });
    });

    return advice;
  }

  /**
   * G√©n√®re des suggestions de questions bas√©es sur le contexte
   */
  static generateQuestionSuggestions(context?: any): string[] {
    const suggestions = [
      'Comment am√©liorer ma forme physique ?',
      'Quels exercices pour perdre du poids ?',
      'Comment gagner en masse musculaire ?',
      'Quelle alimentation pour mes objectifs ?',
      'Comment rester motiv√© ?',
      'Comment √©viter les blessures ?'
    ];

    if (context?.userStats?.streak > 7) {
      suggestions.unshift('Comment maintenir ma r√©gularit√© ?');
    }

    if (context?.userStats?.calories > 50000) {
      suggestions.unshift('Comment optimiser mes entra√Ænements ?');
    }

    return suggestions.slice(0, 4);
  }
}

/**
 * Service pour les coaches humains
 */
export class CoachService {
  /**
   * R√©cup√®re la liste des coaches disponibles
   */
  static async getAvailableCoaches(): Promise<CoachProfile[]> {
    // Simulation de coaches - √† remplacer par une vraie API
    return [
      {
        id: '1',
        name: 'Marie Dubois',
        specialty: 'Musculation & Cardio',
        experience: 5,
        rating: 4.9,
        avatar: 'https://via.placeholder.com/100',
        isOnline: true,
        lastActive: new Date()
      },
      {
        id: '2',
        name: 'Pierre Martin',
        specialty: 'CrossFit & HIIT',
        experience: 8,
        rating: 4.8,
        avatar: 'https://via.placeholder.com/100',
        isOnline: false,
        lastActive: new Date(Date.now() - 2 * 60 * 60 * 1000) // 2h ago
      },
      {
        id: '3',
        name: 'Sophie Laurent',
        specialty: 'Yoga & Pilates',
        experience: 6,
        rating: 4.9,
        avatar: 'https://via.placeholder.com/100',
        isOnline: true,
        lastActive: new Date()
      }
    ];
  }

  /**
   * Envoie un message √† un coach
   */
  static async sendMessageToCoach(
    coachId: string,
    message: string,
    userId: string
  ): Promise<boolean> {
    try {
      // Importer le service de messages de chat
      const { ChatMessageService } = await import('../firebase/chatMessages');
      
      // R√©cup√©rer le nom du coach
      const coaches = await this.getAvailableCoaches();
      const coach = coaches.find(c => c.id === coachId);
      const coachName = coach?.name || 'Coach';

      // Envoyer le message via Firebase
      const messageId = await ChatMessageService.sendMessageToCoach(
        userId,
        coachId,
        coachName,
        message
      );

      if (messageId) {
        console.log(`‚úÖ Message envoy√© au coach ${coachName}: ${message}`);
        return true;
      } else {
        console.error('‚ùå √âchec de l\'envoi du message');
        return false;
      }
    } catch (error) {
      console.error('Erreur lors de l\'envoi du message au coach:', error);
      return false;
    }
  }

  /**
   * R√©cup√®re les messages avec un coach
   */
  static async getCoachMessages(
    coachId: string,
    userId: string
  ): Promise<ChatMessage[]> {
    try {
      // Simulation de messages - √† remplacer par une vraie API
      return [
        {
          id: '1',
          userId,
          senderId: coachId,
          senderName: 'Marie Dubois',
          senderType: 'coach',
          message: 'Bonjour ! Comment puis-je vous aider aujourd\'hui ?',
          timestamp: new Date(Date.now() - 60 * 60 * 1000), // 1h ago
          isRead: true
        },
        {
          id: '2',
          userId,
          senderId: userId,
          senderName: 'Vous',
          senderType: 'user',
          message: 'J\'aimerais am√©liorer ma technique de squat',
          timestamp: new Date(Date.now() - 30 * 60 * 1000), // 30min ago
          isRead: true
        }
      ];
    } catch (error) {
      console.error('Erreur lors de la r√©cup√©ration des messages:', error);
      return [];
    }
  }
}
